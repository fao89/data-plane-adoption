- name: use ansible-runner image built from source or latest if none is defined
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ oc_login_command }}
    # openstack-operator catalog pins the sha256, which might differ from latest with time
    oc patch csv -n openstack-operators openstack-ansibleee-operator.v0.0.1 \
      --type='json' -p='[{
      "op":"replace", "path":"/spec/install/spec/deployments/0/spec/template/spec/containers/1/env/0",
      "value": {"name": "RELATED_IMAGE_ANSIBLEEE_IMAGE_URL_DEFAULT", "value": "{{ ansibleee_runner_img | default('quay.io/openstack-k8s-operators/openstack-ansibleee-runner:latest')}}"}}]'

- name: ensure namespace
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc project openstack

- name: Include RHEV vars
  ansible.builtin.include_vars:
    file: rhev.yaml
  when: platform_rhev|default(false)

- name: ensure IPAM is configured
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: network.openstack.org/v1beta1
    kind: NetConfig
    metadata:
      name: netconfig
    spec:
      networks: {{ netconfig_networks }}
    EOF

- name: Slurp the private key
  no_log: "{{ use_no_log }}"
  ansible.builtin.slurp:
    path: "{{ edpm_privatekey_path }}"
  register: edpm_privatekey
  when: edpm_encoded_privatekey is undefined

# Remove this when https://code.engineering.redhat.com/gerrit/q/topic:stable-compute-uuid
# is released in 17.x
- name: Temporary fix to ensure stable compute UUID
  block:
    - name: ensure SSH key
      ansible.builtin.copy:
        dest: /tmp/ansible_private_key
        content: "{{ edpm_encoded_privatekey | default(edpm_privatekey.content) | b64decode }}"
        mode: "0600"
      when: edpm_privatekey_path is undefined

    - name: populate compute_id file
      ansible.builtin.shell: |
        {{ shell_header }}
        {{ oc_header }}
        declare -A computes
        computes=(
          ["{{ edpm_node_hostname }}.localdomain"]="{{ edpm_node_ip }}"
        )

        for name in "${!computes[@]}";
        do
          uuid=$(\
            oc exec -t openstackclient -- \
              openstack hypervisor show $name \
              -f value -c 'id'\
          )

          echo "Writing $uuid to /var/lib/nova/compute_id on $name"
          ssh \
            -i {{ edpm_privatekey_path | default("/tmp/ansible_private_key") }} \
            {{ edpm_user }}@"${computes[$name]}" \
            "echo $uuid > /var/lib/nova/compute_id"

        done

- name: create dataplane-adoption-secret.yaml
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
        name: dataplane-adoption-secret
    data:
        ssh-privatekey: "{{ edpm_encoded_privatekey | default(edpm_privatekey.content) }}"
    EOF

- name: generate an ssh key-pair nova-migration-ssh-key secret
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    cd "$(mktemp -d)"
    ssh-keygen -f ./id -t ecdsa-sha2-nistp521 -N ''
    oc get secret nova-migration-ssh-key || oc create secret generic nova-migration-ssh-key \
    -n openstack \
    --from-file=ssh-privatekey=id \
    --from-file=ssh-publickey=id.pub \
    --type kubernetes.io/ssh-auth
    rm -f id*
    cd -

- name: create a Nova Compute Extra Config service
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: nova-compute-extraconfig
      namespace: openstack
    data:
      19-nova-compute-cell1-workarounds.conf: |
        [workarounds]
        disable_compute_service_check_for_ffu=true
    ---
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneService
    metadata:
      name: nova-compute-extraconfig
      namespace: openstack
    spec:
      label: nova.compute.extraconfig
      configMaps:
        - nova-compute-extraconfig
      secrets:
        - nova-cell1-compute-config
        - nova-migration-ssh-key
      playbook: osp.edpm.nova
    EOF

- name: deploy dataplane
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneNodeSet
    metadata:
      name: openstack
    spec:
      networkAttachments:
        - ctlplane
      preProvisioned: true
      services:
        - bootstrap
        - download-cache
        - configure-network
        - validate-network
        - install-os
        - configure-os
        - run-os
        - reboot-os
        - ovn
        - neutron-metadata
        - libvirt
        - nova-compute-extraconfig
      env:
        - name: ANSIBLE_CALLBACKS_ENABLED
          value: "profile_tasks"
        - name: ANSIBLE_FORCE_COLOR
          value: "True"
      nodes:
        {{ edpm_node_hostname }}:
          hostName: {{ edpm_node_hostname }}
          ansible:
            ansibleHost: {{ edpm_node_ip }}
          networks: {{ edpm_node_networks }}
      nodeTemplate:
        ansibleSSHPrivateKeySecret: {{ ansible_ssh_private_key_secret }}
        managementNetwork: ctlplane
        ansible:
          ansiblePort: 22
          ansibleUser: {{ edpm_user }}
          ansibleVars:
            os_net_config_iface: {{ dataplane_os_net_config_iface | default ('nic1') }}
            os_net_config_set_route: {{ dataplane_os_net_config_set_route | default(true) | bool }}
            os_net_config_dns: {{ dataplane_os_net_config_dns | default("") }}
            service_net_map:
              nova_api_network: internal_api
              nova_libvirt_network: internal_api

            # edpm_network_config
            # Default nic config template for a EDPM compute node
            # These vars are edpm_network_config role vars
            edpm_network_config_override: ""
            edpm_network_config_template: |
              {{ edpm_network_config_template| indent(10) }}

            edpm_network_config_hide_sensitive_logs: false
            #
            # These vars are for the network config templates themselves and are
            # considered EDPM network defaults.
            neutron_physical_bridge_name: {{ neutron_physical_bridge_name }}
            neutron_public_interface_name: {{ neutron_public_interface_name }}
            role_networks: {{ role_networks }}
            networks_lower: {{ networks_lower }}

            # edpm_nodes_validation
            edpm_nodes_validation_validate_controllers_icmp: false
            edpm_nodes_validation_validate_gateway_icmp: false

            timesync_ntp_servers: {{ timesync_ntp_servers | default(default_timesync_ntp_servers) }}

            edpm_ovn_controller_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ovn-controller:{{ image_tag }}"
            edpm_iscsid_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-iscsid:{{ image_tag }}"
            edpm_logrotate_crond_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-cron:{{ image_tag }}"
            edpm_nova_compute_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-compute:{{ image_tag }}"
            edpm_nova_libvirt_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-libvirt:{{ image_tag }}"
            edpm_ovn_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"

            gather_facts: false
            enable_debug: false
            # edpm firewall, change the allowed CIDR if needed
            edpm_sshd_configure_firewall: true
            edpm_sshd_allowed_ranges: {{ edpm_sshd_allowed_ranges }}
            # SELinux module
            edpm_selinux_mode: enforcing
            plan: overcloud
    EOF

- name: deploy the dataplane deployment
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlaneDeployment
    metadata:
      name: openstack
    spec:
      nodeSets:
      - openstack
    EOF

- name: wait for dataplane node set to be ready
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    NODESET_NAME=openstack
    DEPLOYMENT_NAME=openstack
    echo "========= AEE Pods ========="
    oc get pod -l osdpd=${DEPLOYMENT_NAME}
    LAST_SERVICE_NAME=$(oc get osdpns ${NODESET_NAME} -o jsonpath='{.spec.services}' | jq -r last)
    echo "========= Last service name: ${LAST_SERVICE_NAME} ========="
    LAST_SERVICE_POD=$(oc get pod -l job-name=${LAST_SERVICE_NAME}-${DEPLOYMENT_NAME} -o name)
    echo "========= Last service POD name: ${LAST_SERVICE_POD} ========="
    oc get ${LAST_SERVICE_POD} -o jsonpath='{.status.phase}{"\n"}' | grep Succeeded
    oc get osdpd openstack -o jsonpath='{.status.deployed}{"\n"}' | grep true
  register: osdpd_running_result
  until: osdpd_running_result is success
  retries: 25
  delay: 60

- name: Complete Nova services Wallaby->Antelope FFU
  ansible.builtin.include_tasks:
    file: nova_ffu.yaml
