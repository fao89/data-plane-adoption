- name: ensure IPAM is configured
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: network.openstack.org/v1beta1
    kind: NetConfig
    metadata:
      name: netconfig
    spec:
      networks:
      - name: CtlPlane
        dnsDomain: ctlplane.example.com
        subnets:
        - name: subnet1
          allocationRanges:
          - end: 192.168.122.120
            start: 192.168.122.100
          - end: 192.168.122.200
            start: 192.168.122.150
          cidr: 192.168.122.0/24
          gateway: 192.168.122.1
      - name: InternalApi
        dnsDomain: internalapi.example.com
        subnets:
        - name: subnet1
          allocationRanges:
          - end: 172.17.0.250
            start: 172.17.0.100
          cidr: 172.17.0.0/24
          vlan: 20
      - name: External
        dnsDomain: external.example.com
        subnets:
        - name: subnet1
          allocationRanges:
          - end: 10.0.0.250
            start: 10.0.0.100
          cidr: 10.0.0.0/24
          gateway: 10.0.0.1
      - name: Storage
        dnsDomain: storage.example.com
        subnets:
        - name: subnet1
          allocationRanges:
          - end: 172.18.0.250
            start: 172.18.0.100
          cidr: 172.18.0.0/24
          vlan: 21
      - name: StorageMgmt
        dnsDomain: storagemgmt.example.com
        subnets:
        - name: subnet1
          allocationRanges:
          - end: 172.20.0.250
            start: 172.20.0.100
          cidr: 172.20.0.0/24
          vlan: 23
      - name: Tenant
        dnsDomain: tenant.example.com
        subnets:
        - name: subnet1
          allocationRanges:
          - end: 172.19.0.250
            start: 172.19.0.100
          cidr: 172.19.0.0/24
          vlan: 22
    EOF

- name: create dataplane-adoption-secret.yaml
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
        name: dataplane-adoption-secret
    data:
        ssh-privatekey: "{{ edpm_encoded_privatekey }}"
    EOF

- name: set Nova copy shell vars
  no_log: "{{ use_no_log }}"
  ansible.builtin.set_fact:
    nova_shell_vars: |
      CONTROLLER1_SSH="{{ controller1_ssh }}"
      CONTROLLER2_SSH="{{ controller2_ssh }}"
      CONTROLLER3_SSH="{{ controller3_ssh }}"

- name: stop nova services
  no_log: "{{ use_no_log }}"
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    {{ nova_shell_vars }}

    ServicesToStop=("tripleo_nova_api_cron.service"
                    "tripleo_nova_api.service"
                    "tripleo_nova_compute.service"
                    "tripleo_nova_conductor.service"
                    "tripleo_nova_libvirt.target"
                    "tripleo_nova_metadata.service"
                    "tripleo_nova_migration_target.service"
                    "tripleo_nova_scheduler.service"
                    "tripleo_nova_virtlogd_wrapper.service"
                    "tripleo_nova_virtnodedevd.service"
                    "tripleo_nova_virtproxyd.service"
                    "tripleo_nova_virtqemud.service"
                    "tripleo_nova_virtsecretd.service"
                    "tripleo_nova_virtstoraged.service"
                    "tripleo_nova_vnc_proxy.service")

    echo "Stopping nova services"

    for service in ${ServicesToStop[*]}; do
        echo "Stopping the service: $service in each controller node"
        $CONTROLLER1_SSH sudo systemctl stop $service
        $CONTROLLER2_SSH sudo systemctl stop $service
        $CONTROLLER3_SSH sudo systemctl stop $service
    done

- name: deploy dataplane
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc apply -f - <<EOF
    apiVersion: dataplane.openstack.org/v1beta1
    kind: OpenStackDataPlane
    metadata:
      name: openstack
    spec:
      deployStrategy:
        deploy: true
      nodes:
        standalone:
          ansibleHost: {{ edpm_node_ip }}
          deployStrategy: {{ deployStrategy }}
          hostName: standalone
          node:
            ansibleVars:
              ctlplane_ip: {{ edpm_node_ip }}
            networks:
            - defaultRoute: true
              fixedIP: {{ edpm_node_ip }}
              name: CtlPlane
              subnetName: subnet1
            - name: InternalApi
              subnetName: subnet1
            - name: Storage
              subnetName: subnet1
            - name: Tenant
              subnetName: subnet1
          role: edpmadoption
      roles:
        edpmadoption:
          deployStrategy: {{ deployStrategy }}
          networkAttachments: $(oc get network-attachment-definitions -o json | jq -r "[.items[].metadata.name]")
          preProvisioned: true
          services:
            - configure-network
            - validate-network
            - install-os
            - configure-os
            - run-os
          env:
            - name: ANSIBLE_CALLBACKS_ENABLED
              value: "profile_tasks"
            - name: ANSIBLE_FORCE_COLOR
              value: "True"
            - name: ANSIBLE_ENABLE_TASK_DEBUGGER
              value: "True"
          nodeTemplate:
            managementNetwork: ctlplane
            ansiblePort: 22
            ansibleSSHPrivateKeySecret: {{ ansibleSSHPrivateKeySecret }}
            ansibleUser: root
            ansibleVars:
              service_net_map:
                nova_api_network: internal_api
                nova_libvirt_network: internal_api

              # edpm_network_config
              # Default nic config template for a EDPM compute node
              # These vars are edpm_network_config role vars
              edpm_network_config_template: templates/single_nic_vlans/single_nic_vlans.j2
              edpm_network_config_hide_sensitive_logs: false
              #
              # These vars are for the network config templates themselves and are
              # considered EDPM network defaults.
              neutron_physical_bridge_name: br-ctlplane
              neutron_public_interface_name: eth0
              role_networks:
              - InternalApi
              - Storage
              - Tenant
              networks_lower:
                External: external
                InternalApi: internal_api
                Storage: storage
                Tenant: tenant

              # edpm_nodes_validation
              edpm_nodes_validation_validate_controllers_icmp: false
              edpm_nodes_validation_validate_gateway_icmp: false

              edpm_ovn_metadata_agent_metadata_agent_DEFAULT_metadata_proxy_shared_secret: $(oc get secret osp-secret -o json | jq -r .data.MetadataSecret  | base64 -d)
              edpm_ovn_metadata_agent_DEFAULT_bind_host: 127.0.0.1
              edpm_chrony_ntp_servers: {{ edpm_chrony_ntp_servers|default(default_edpm_chrony_ntp_servers) }}

              dns_search_domains: []

              edpm_ovn_controller_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-ovn-controller:{{ image_tag }}"
              edpm_iscsid_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-iscsid:{{ image_tag }}"
              edpm_logrotate_crond_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-cron:{{ image_tag }}"
              edpm_nova_compute_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-compute:{{ image_tag }}"
              edpm_nova_libvirt_container_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-nova-libvirt:{{ image_tag }}"
              edpm_ovn_metadata_agent_image: "{{ registry_name }}/{{ registry_namespace }}/openstack-neutron-metadata-agent-ovn:{{ image_tag }}"

              gather_facts: false
              enable_debug: false
              # edpm firewall, change the allowed CIDR if needed
              edpm_sshd_configure_firewall: true
              edpm_sshd_allowed_ranges: ['192.168.122.0/24']
              # SELinux module
              edpm_selinux_mode: enforcing
              plan: overcloud
    EOF

- name: wait for dataplane to be ready
  ansible.builtin.shell: |
    {{ shell_header }}
    {{ oc_header }}
    oc wait --for condition=Ready osdp/openstack --timeout=30m
  # TODO: work on network configuration for making possible to run this task on other IP ranges
  when: "edpm_node_ip.startswith('192.168.122')"
